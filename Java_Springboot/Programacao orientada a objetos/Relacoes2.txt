Relações:

Herança -
É o relacionamento entre classes em que uma classe chamada de subclasse (Classe filha) é uma extensão, um subtipo, de outra classe 
chamada superclasse (classe pai);

Devido a isto, a subclasse consegue reaproveitar os atributos e métodos dela.

Finalidade da herança é criar subtipos;

class A extends B { "(A está herdando B)
	...
}

-------------
Tipos de herança:

Simples - A classe filha tem só uma classe mão

Mútipla - classe filha tem uma ou mais classes mães (No java não existe)

-------------

Upcast e Downcast:

Subir a hierarquia
Descer na hierarquia

Upcast: A a = new B(); (transformando B em A)

Downcast B a = (B)new A(); (Não é muito útil)

-------------

Polimorfismo:
"A mesma ação, se comportando diferente"

Sobrescrita:
"A mesma ação, podendo se comportar diferente"

------------

Associação:
"Possibilita um relacionamento entre classes/objetos, no qual estes possam pedir ajuda a outras classes/objetos e representar de forma completa o conceito o qual se destinam.

Tipos de associação -

Estrutural: 

Composição "Com parte todo"
Pessoa -> endereço. (se pessoa deixa de existir endereço tambem deixa)

Agregação "Sem parte todo"
Disciplina -> aluno (Se disciplina deixa de existir não necessariamente deixa o aluno)

class Disciplina {

Aluno aluno;

}

Comportamental "Depende de"

-------------

Interface:

Define um contrato que deve ser seguido pela classe que a implementa
Quando uma classe implementa uma interface, ela se compromete a realizar todos os comportamentos que
a interface disponibiliza.

interface A { (criando interface)

}

class B implements A {

}

----------

Pacotes (pastas):

----------
Visibilidades:
Private
Protected
Public






